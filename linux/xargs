#
# A filter for feeding arguments to a command, and also a tool for
# assembling the commands themselves. It breaks a data stream into 
# small chunks for filters and commands to process. 
#
# Some Unix commands doesn't read stdin, there is where xargs come to 
# playing, which will transform stdout from previous pipe into arguments.
#
# The default command for xargs is 'echo'.

xargs is intended to deal with very long option for some command, but
it seems useless for modern OS, which support very long argument list
in my experiment, I rm more than 10000 fils at the same time with each
file's name longer than 30 chars.

# options
-0
    allow handling arguments containing whitespace or quotes
    in combination with find -print0 or grep -lZ
    i.e.
    > find . -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f
    > grep -rliwZ GUI . | xargs -0 rm -f
-P (--max-process) N
    Parallel process, run up to N processes simultaneously
-i
    i is the replace strings option
-d  '\n'
    set delimiter as '\n', to allow xargs to deal with line-records.
-L N
    sometimes, stdin includes multi-lines, this option limits number of lines passed as argument for each execusion
    > echo -e "a\nb\nc" | xargs -L 1 echo
-n N
    limits to N arguments passed for each execusion
    > ls | xargs -n 8 echo
    > echo {0..9} | xargs -n 2
-p
    print out command for valification
-t
    just print out command, without valification
{}
    as in find, {} serves as a placeholder for replacement text
    i.e.
    > ls . | xargs -i -t cp ./{} $DES_DIR
-I arg_name
    when we need to used argument multi-times, we need to name it with this option
    > cat file | xargs -I file_name sh -c 'echo file_name; touch file_name'
    pass the argument as file_name, and then use it in following shell commands
    

